{"ast":null,"code":"import _slicedToArray from \"D:\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // React 声明式，高效且灵活构建图形用户界面的JavaScript库\n// React元素、React组件、props、state\n// 方块，其实每一个Square都渲染了一个单独的Button\n// 父组件,子组件,受控组件\n// 函数组件、class组件\n// NaN not a number     parseInt时给定的字符串不存在数值形式\n// Object.assign(target, source),从源枚举属性复制到目标枚举属性\n// var newPlayer = Object.assign({}, player, {score: 2}); \n// 不直接修改底层数据 => 不可变性（不可变数据）\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, props.value);\n} //   面板\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    //   在最外层加了一个括号，使得JavaScript解析时候不会在return后面自动插入分号从而破坏代码结构\n    //   render用于视图渲染，return用于数据传递\n    // return是JavaScript中的语法，将需要用于交互的对象常量也放入return中，相当于get和set方法，并将操作放进来，形成多重return\n    return React.createElement(Square, {\n      value: this.props.squares[i] // 箭头函数\n      ,\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    });\n  } // 一个组件接收一些参数，我们把这些参数叫做props\n  // 然后通过render方法返回需要展示在屏幕上的视图的展示结构\n  // 更具体的说，render返回了一个React元素\n  // 这是一种对于渲染内容的轻量级描述\n  // 在JSX中你可以任意使用JavaScript表达式，只需要用一个大括号括起来\n  // 每一个React元素事实上都是一个JavaScript对象\n  // 你可以在你的程序中把它保存在变量中或者当做参数传递\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    // 定义含有构造函数的React组件时,需要调用的父类方法\n    super(props); // 在构造函数中定义了state的取值,用于记忆\n\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      // 当前查看历史纪录的项\n      stepNumber: 0,\n      // 当前落子位置\n      locationNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    // arrayObject.slice(start,end),从已有数组中返回指定的元素\n    // 清空\"未来历史记录\"\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1]; // 这里是返回squares数组的一个副本\n\n    const squares = current.squares.slice(); //记录下当前落子位置\n\n    this.state.locationNumber = i; // 已经有玩家胜出或者该格子已经被填充，则不继续做处理\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      // arrayObject.concat(arrayX,arrayX,....,arrayX)用于连接两个或多个数组\n      // 且不会改变现有数组，而是返回被连接数组的一个副本\n      history: history.concat([{\n        squares: squares\n      }]),\n      // 重新渲染行走情况\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  } // 返回值\n\n\n  render() {\n    const history = this.state.history; // 使用最新一次的历史记录来确定并展示游戏的状态\n\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares); // 数组的map方法，通常用于把某数组映射为另一数组\n    // 在此处map把历史步骤映射为了代表按钮的React元素\n\n    const moves = history.map((step, move) => {\n      let i;\n      let j;\n      let add;\n\n      switch (i) {\n        case 0:\n          i = 1, j = 1;\n          break;\n\n        case 1:\n          i = 2, j = 1;\n          break;\n\n        case 2:\n          i = 3, j = 1;\n          break;\n\n        case 3:\n          i = 1, j = 2;\n          break;\n\n        case 4:\n          i = 1, j = 2;\n          break;\n\n        case 5:\n          i = 1, j = 2;\n          break;\n\n        case 6:\n          i = 1, j = 3;\n          break;\n\n        case 7:\n          i = 1, j = 3;\n          break;\n\n        default:\n          i = 1, j = 3;\n      }\n\n      const desc = move ? // 'Go to move #' + '(' + i + ',' + j + ')' :\n      'Go to move #' + this.state.locationNumber : 'Go to game start';\n      return (// React key（当前层级唯一即可） 和 ref，显式指定一个key，用于动态渲染\n        React.createElement(\"li\", {\n          key: move,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: () => this.jumpTo(move),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, desc))\n      );\n    }); //定义游戏状态栏\n\n    let status;\n\n    if (winner) {\n      status = 'Winner:' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    } //若格子被填满且无人获胜，则为平局\n\n\n    let isTie = false;\n\n    for (let i = 0; i < 9; i++) {\n      // JS的==具有自适应功能，如123=='123'，1==true都是返回真\n      if (current.squares[i] == null) {\n        isTie = true;\n      }\n    }\n\n    if (!isTie && !winner) {\n      status = 'You Tie!';\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, moves)));\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 200\n  },\n  __self: this\n}), document.getElementById('root')); //   直接传递的实参\n\nfunction calculateWinner(squares) {\n  //   定义多维数组\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2]; //   如果连成一线\n\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      // 胜者\"X\"或者胜者\"O\"\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["D:\\my-app\\src\\index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","stepNumber","locationNumber","xIsNext","handleClick","slice","current","length","calculateWinner","setState","concat","jumpTo","step","winner","moves","map","move","j","add","desc","status","isTie","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// React 声明式，高效且灵活构建图形用户界面的JavaScript库\r\n// React元素、React组件、props、state\r\n// 方块，其实每一个Square都渲染了一个单独的Button\r\n// 父组件,子组件,受控组件\r\n// 函数组件、class组件\r\n\r\n// NaN not a number     parseInt时给定的字符串不存在数值形式\r\n// Object.assign(target, source),从源枚举属性复制到目标枚举属性\r\n// var newPlayer = Object.assign({}, player, {score: 2}); \r\n// 不直接修改底层数据 => 不可变性（不可变数据）\r\nfunction Square(props){\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n  \r\n//   面板\r\n  class Board extends React.Component {\r\n      renderSquare(i){\r\n        //   在最外层加了一个括号，使得JavaScript解析时候不会在return后面自动插入分号从而破坏代码结构\r\n        //   render用于视图渲染，return用于数据传递\r\n        // return是JavaScript中的语法，将需要用于交互的对象常量也放入return中，相当于get和set方法，并将操作放进来，形成多重return\r\n          return (\r\n            <Square \r\n                value={this.props.squares[i]}\r\n                // 箭头函数\r\n                onClick={() => this.props.onClick(i)} \r\n            />\r\n          );\r\n      }\r\n// 一个组件接收一些参数，我们把这些参数叫做props\r\n// 然后通过render方法返回需要展示在屏幕上的视图的展示结构\r\n// 更具体的说，render返回了一个React元素\r\n// 这是一种对于渲染内容的轻量级描述\r\n\r\n// 在JSX中你可以任意使用JavaScript表达式，只需要用一个大括号括起来\r\n// 每一个React元素事实上都是一个JavaScript对象\r\n// 你可以在你的程序中把它保存在变量中或者当做参数传递\r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props){\r\n    // 定义含有构造函数的React组件时,需要调用的父类方法\r\n        super(props);\r\n        // 在构造函数中定义了state的取值,用于记忆\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            // 当前查看历史纪录的项\r\n            stepNumber: 0,\r\n            // 当前落子位置\r\n            locationNumber: 0,\r\n            xIsNext: true,\r\n        }\r\n    }\r\n    \r\n    handleClick(i){\r\n        // arrayObject.slice(start,end),从已有数组中返回指定的元素\r\n        // 清空\"未来历史记录\"\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        // 这里是返回squares数组的一个副本\r\n        const squares = current.squares.slice();\r\n        //记录下当前落子位置\r\n        this.state.locationNumber = i;\r\n        // 已经有玩家胜出或者该格子已经被填充，则不继续做处理\r\n        if(calculateWinner(squares) || squares[i]){\r\n            return\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            // arrayObject.concat(arrayX,arrayX,....,arrayX)用于连接两个或多个数组\r\n            // 且不会改变现有数组，而是返回被连接数组的一个副本\r\n            history: history.concat([{\r\n                squares: squares\r\n            }]),\r\n            // 重新渲染行走情况\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n          });\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    // 返回值\r\n    render() {\r\n        const history = this.state.history;\r\n        // 使用最新一次的历史记录来确定并展示游戏的状态\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        // 数组的map方法，通常用于把某数组映射为另一数组\r\n        // 在此处map把历史步骤映射为了代表按钮的React元素\r\n        const moves = history.map((step, move) => {\r\n          let i;\r\n          let j;\r\n          let add;\r\n          switch(i){\r\n            case 0 : i = 1,j = 1;\r\n            break;\r\n            case 1 : i = 2,j = 1;\r\n            break;\r\n            case 2 : i = 3,j = 1;\r\n            break;\r\n            case 3 : i = 1,j = 2;\r\n            break;\r\n            case 4 : i = 1,j = 2;\r\n            break;\r\n            case 5 : i = 1,j = 2;\r\n            break;\r\n            case 6 : i = 1,j = 3;\r\n            break;\r\n            case 7 : i = 1,j = 3;\r\n            break;\r\n            default:i = 1,j = 3;\r\n          }\r\n            const desc = move ?\r\n                // 'Go to move #' + '(' + i + ',' + j + ')' :\r\n                'Go to move #' + this.state.locationNumber : \r\n                'Go to game start';\r\n            return(\r\n                // React key（当前层级唯一即可） 和 ref，显式指定一个key，用于动态渲染\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n        //定义游戏状态栏\r\n        let status;\r\n        if(winner){\r\n            status =   'Winner:' + winner;\r\n        }else{\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n        //若格子被填满且无人获胜，则为平局\r\n        let isTie = false;\r\n        for(let i = 0; i < 9; i++){\r\n          // JS的==具有自适应功能，如123=='123'，1==true都是返回真\r\n            if(current.squares[i] == null){\r\n              isTie = true;\r\n          }\r\n        }\r\n        if(!isTie && !winner){\r\n          status = 'You Tie!';\r\n        }\r\n        \r\n        return(\r\n            <div className=\"game\">\r\n              <div className=\"game-board\">\r\n                <Board \r\n                    squares={current.squares}\r\n                    onClick={(i) => this.handleClick(i)}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n            </div>\r\n      );\r\n    }   \r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n//   直接传递的实参\r\n  function calculateWinner(squares) {\r\n    //   定义多维数组\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n    //   如果连成一线\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        // 胜者\"X\"或者胜者\"O\"\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }"]},"metadata":{},"sourceType":"module"}